Flask-Login :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# 

# документация на английском:
# https://flask-login.readthedocs.io/en/latest/

# установка:
# pip install flask-login

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

from flask_login import *

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Constans

USE_SESSION_FOR_NEXT = True
# если в True сессии могут использовать 'next'

AUTH_HEADER_NAME = 'name'
# 

REMEMBER_COOKIE_DURATION = datetime.timedelta
# устанавливает время до истечения файла cookie

SESSION_PROTECTION = 'strong'
# устанавливает защиту для сессии, при данном значении Flask-Login будет 
# следить за IP-адресом клиента и агентом браузера и завершать сеанс 
# принудительно при обнаружении изменений (также может быть значение 
# 'basic', 'None')




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# 
LoginManager(app=None, add_context_processor=True)
# Конструктор экземпляров приложений. Полученные экземпляры приложения 
# используется для хранения настроек, используемых для входа в приложения.

	unauthorized()
	# вызывается когда пользователь пытается получить неавторизованный 
	# доступ. Данный метод отправляет сообщение для flash с помощью 
	# login_message и перенаправляет пользователя на страницу авторизации 
	# с помощью login_view
		login_view
		# Имя представления для перенаправления, когда пользователю 
		# необходимо войти в систему (это может быть абсолютный URL-адрес, 
		# если ваш механизм проверки подлинности является внешним по 
		# отношению к вашему приложению).

		login_message
		# Сообщение для flash, когда пользователь перенаправляется на 
		# страницу входа в систему.
		
		login_message_category
		# устанавливает категорию для сообщения. ('info', ...)

		unauthorized_handler(callback)
		#
	
	needs_refresh()
	# вызывается, когда пользователь вошел в систему, но их нужно повторно 
	# проверить, потому что их сеанс устарел. Данный метод отправляет 
	# сообщение для flash с помощью refresh_message и перенаправляет 
	# пользователя на страницу авторизации с помощью refresh_view
		refresh_view
		# Имя представления для перенаправления, когда пользователь нуждается в 
		# повторной аутентификации.

		needs_refresh_message
		# Сообщение для flash, когда пользователь перенаправляется на страницу 
		# повторной проверки подлинности.
		
		needs_refresh_message_category
		# устанавливает категорию для сообщения. ('info', ...)

		needs_refresh_handler(callback)
		#
	
	session_protection = 'strong'
	# при данном значении Flask-Login будет следить за IP-адресом клиента и 
	# агентом браузера и завершать сеанс принудительно при обнаружении 
	# изменений (также может быть значение 'basic', 'None')


# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# General Configuration

user_loader(callback)
# 

header_loader(callback)
#

anonymous_user
# Функция класса или фабрики, создающая анонимного пользователя, которая 
# используется, когда никто не вошел в систему.




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Login Mechanisms

current_user
# Прокси для текущего пользователя.
	is_authenticated()
	# должен вовращать True, если прошёл процедуру аутентификации, и False - в 
	# противном случае

	is_active() 
	# должен возвращать True, если пользователь имеет права на аутентификацию, 
	# и False - в противном случае. Возвращаемое значение False можно 
	# использовать как признак необходимости отключения учётной записи

	is_anonymous() 
	# для обычных пользователей всегда должен возвращать False

	get_id() 
	# должен возвращать уникальный идентификатор пользователя в виде строки 
	# Юникода


login_fresh()
# Это возвращает значение True, если текущий вход обновлен. Тоесть не 
# востоновлен из cookie 'запомнить меня', а повторный вход с помощью формы.


login_user(user, remember=False, duration=None, force=False, fresh=True)
# Регестрирует пользователя.
	user (object)
	# пользователь который хочет войти в систему
	remember (bool)
	# Следует ли помнить пользователя после окончания сеанса. По умолчанию 
	# False.
	duration (datetime.timedelta)
	# Время истечения срока действия файла cookie. Если None, используется 
	# значение, заданное в настройках. По умолчанию - None.
	force (bool)
	# Если пользователь неактивен, установка этого параметра в значение 
	# True будет регистрироваться независимо от них. По умолчанию False.
	fresh (bool)
	# установка этого параметра в False будет регистрировать пользователя 
	# с 'несвежими' сесиями. По умолчанию используется значение True.

logout_user()
# Выводит пользователя из системы. Также очистит файл cookie, которые 
# использовались для запаминания пользователя при входе в систему.

confirm_login()
# Это устанавливает текущий сеанс как свежий. Сессии становятся устаревшими
# когда они берутся востанавливаются из cookie.




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Decorators

@login_required
# Если эти декарировать представление, он гарантирует, что текущий 
# пользователь войдет в систему и будет аутентифицирован до вызова 
# фактического представления. (Если это не так, он вызывает автоответчик 
# LoginManager.unauthorized.)

@fresh_login_required
# Если декарировать представление этим, он будет следить за тем, чтобы имя 
# текущего пользователя было свежим, то есть их сеанс не был восстановлен 
# из файла cookie «запомнить меня». Чувствительные операции, такие как смена 
# пароля или электронной почты, должны быть защищены данным декаратором, 
# чтобы помешать усилиям куки-файлов.



# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Utilities

login_url(login_view, next_url=None, next_field='next')
# Создает URL-адрес для перенаправления на страницу входа. Если 
# предоставляется только login_view, это просто вернет URL для него. Однако 
# если next_url предоставлен, это добавит параметр next=URL в строку 
# запроса, чтобы вид входа в систему мог перенаправляться обратно на этот 
# URL. Неавторизованный обработчик по умолчанию Flask-Login использует эту 
# функцию при перенаправлении на ваш URL-адрес для входа.
	login_view (str)
	# Имя представления для входа в систему. (Альтернативно, фактический 
	# URL-адрес для входа в систему).
	next_url (str)
	# URL-адрес, для последующего перенаправления после входа в систему.
	next_field (str)
	# В каком поле будет храниться следующий URL-адрес. (По умолчанию 
	# используется 'next').




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Signals

user_logged_in
# Отправляется, когда пользователь вошел в систему. В дополнение к 
# приложению (которое является отправителем) ему передается пользователь, 
# который является пользователем, вошедшим в систему.

user_logged_out
# Отправляется, когда пользователь вышел из системы. В дополнение к 
# приложению (который является отправителем), он передает пользователя, 
# который вышел выходил из системы.

user_login_confirmed
# Отправляется, когда подтверждается логин пользователя, отмечая его как 
# свежий. (Он не вызывается для обычного входа.) Он не передаёт 
# дополнительных аргументов.

user_unauthorized
# Отправляется, когда в LoginManager вызывается метод unauthorized. Он не 
# передаёт дополнительных аргументов, кроме приложения.

user_needs_refresh
# Отправляется, когда метод в LoginManager вызывается метод require_refresh. 
# Он не получает дополнительных аргументов, кроме приложения.

session_protected
# Отправляется всякий раз, когда защита сеанса вступает в силу, а сеанс 
# помечен как 'несвежий' или 'удален'. Он не получает дополнительных 
# аргументов, кроме приложения.

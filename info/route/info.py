route :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Получив запрос от клиента, приложение должно определить какую функцию
# представления вызвать для его обслуживания. Для этого flask ищет URL 
# запроса в карте адресов URL и функциями представления. Этот асициативный
# массив конструируется фреймворком с помощью декораторов app.route() или
# эквивалентных недекарированых вызовов app.add_url_rule()

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

app.url_map
# карта адресов URL

url_for(func_name)
# from flask import url_for
# с помощью даной функции можно конструировать URL примеры можно посмотреть
# в ex.py

route(url, methods)
#

@app.route(url)
# связывает функцию к которой она применяется к указанному URL-адресу

@app.route('/user/<name>')
# с помощью <name> указывается переменная которая передаётся вместе с URL
# и должна приниматься в качестве аргумента (name) функцией к которой
# применяется данный декоратор

@app.route('post/<int:post_id>')
# переменые можно ковертировать в определённые типы
# примеры коверторов
	int
	# принимает целые числа
	string
	# принимает любой текст без косой черты (по умолчанию)
	float
	# как int, но для значений с плавающей точкой
	path
	# как и string, но также принимает косые черты
	uuid
	# принимает строки UUID
	any
	# 


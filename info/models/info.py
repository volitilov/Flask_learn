# :::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Часто используемые типы столбцов в SQLAlchemy

Integer
# обычное целое число, обычно 32-битное 

SmallInteger
# короткое число, обычно 16-битное

BigInteger
# целое число с неограниченной точностью

Float
# вещественное число

Numeric
# число с фексированной точкой

String
# строка переменной длины

Text 
# строка переменной дленны оптимизированная для 
# хранения больших строк

Unicode
# строка переменной длины с символами unicode

UnicodeText
# строка переменной длины с символами unicode
# оптимизированая для хранения больших строк

PickleType
# автоматически сериализуется с помощью модуля pickle

Boolean     # логическое значение
Date        # дата
Time        # время
DateTime    # дата и время
Interval    # интервал времени
Enum        # список строк 
LargeBinary # двоичный объект




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Настройки для столбцов в SQLAlchemy

primary_key 
# если установлен в True, столбец таблицы будет 
# использоваться как первичный ключ

unique
# если установленно в True, для этого столбца будет 
# запрещенно сохранять неуникальное значение

index
# если установленно в True, для столбца таблицы будет 
# создан индекс, что обеспечит более эффективное 
# выполнение запросов

nullable
# если установленно в True, в этом столбце будет разрешенно 
# сохранять пустое значение. Если установлено False, в 
# этом столбце будет запрещенно сохранять пустое значение 

default
# определяет значение по умолчанию для столбцов




# :::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Часто используеммые параметры настройки отношений в 
#  SQLAlchemy

backref 
# добавляет обратную ссылку на другую модель, участвующую 
# в отношении

primaryjoin 
# явно определяет условие соединения двух моделей. Эта 
# настройка необходима только в случае неоднозначности

lazy  
# определяет как должны извлекаться элементы, связанные 
# отношением. Возможными значениями являются: 
# - select (элементы извлекаются при первой попытке 
#   обращения к ним) 
# - immediate (элементы извлекаются в момент извлечения 
#   исходного объекта) 
# - joined (элементы извлекаются немедленно, но как 
#   соединение (join)) 
# - subquery (елементы извлекаются немедленно, но как 
#   подзапрос) 
# - noload (элементы никогда неизвлекаются) 
# - dynamic (вместо извлечения элементов возвращается 
#   запрос, каторый может их извлечь)

uselist
# если установленно в значение False, используется 
# скаляр вместо списка

order_by
# определяет порядок сортировки элементов, связанных 
# отношением

secondary
# определяет имя асоциацивной таблицы при использовании 
# отношения "многие ко многим"

secondaryjoin 
# определяет вторичное условие соединения при использовании 
# отношения "многие ко многим", когда SQLAlchemy 
# оказывается не в состоянии определить его самостоятельно 



# example ::::::::::::::::::::::::::::::::::::::::::::::::::::
from app import db


class User(db.Model):
  __tablename__ = 'users'
  id = db.Column(db.Integer, primary_key=True)
  username = db.Column(db.String(64), unique=True, index=True)
  role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))

  def __repr__(self):
    return '<User {}>'.format(self.username)

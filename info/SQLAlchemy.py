# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# db.methods

db.create_all()     # создать таблицы базы данных
db.drop_all()       # удалить таблицы базы данных

db.session.add_all([obj, obj]) 
db.session.add(obj) # внести изменения бызы с помощью сеанса

db.commit()         # сохранить сеанс изменений
db.session.rollback() # откатить изменения
db.session.delete(obj) # удаляет объект из базы

Eample_table.query.all() 
# возвращает всё содержимое таблицы Example_table

User.query.filter_by(role=user_role).all()
# выполняет поиск всех пользователей, которым присвоенна роль 
# User

str(User.query.filter_by(role=user_role))
# получить SQL-код в виде строки


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Часто используеммые фильтры запросов SQLAlchemy

filter()    # возвращает новый объект запроса, добавляющий в 
            # оригинальный запрос новый фильтр 

filter_by() # возвращает новый объект запроса, добавляющий 
            # новый фильтр проверки на равентсво 

limit()     # возвращает новый объект запроса, ограничивающий 
            # число результатов задданым количеством 

offset()    # возвращает новый объект запроса, осуществляющий 
            # смещение относительно начала результатов, 
            # возвращаемых оригинальным запросом 

order_by()  # возвращает новый объект запроса, выполняющий 
            # сортировку результатов в соотсветствии с 
            # указанными критериями

group_by()  # возвращает новый объект запроса, группирующий 
            # результаты оригинального запроса в соответствии 
            # с указанными критериями



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Часто используемые методы выполнения запросов из SQLAlchemy

all()           # возвращает все результаты в виде списка

first()         # возвращает первый результат или None, если 
                # результаты отсутствуют

first_or_404()  # возвращает первый результат. Если результаты
                # отсутствуют, прерывает обработку HTTP-запроса, 
                # возвращая код ошибки 404

get()           # возвращает строку, указанную соответствующую 
                # указанному значению первичного ключа, или None, 
                # если результаты отсутствуют

get_or_404()    # возвращает строку, соответствующую указанному
                # значению первичного ключа. Если результаты 
                # отсутствуют, прерывает обработку HTTP-запроса, 
                # возвращая код ошибки 404

count()         # возвращает число результатов

paginate()      # возвращает объект Pagination, содержащий 
                # результаты в указанном деопазоне 
                